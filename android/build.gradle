def localProps = new Properties()
def localPropertiesFile = file("local.properties")
if (localPropertiesFile.exists()) {
    localProps.load(new InputStreamReader(new FileInputStream(localPropertiesFile), "UTF-8"))
}
def debugNativeLibraries = localProps.getProperty('NATIVE_DEBUG_ON', 'FALSE').toBoolean()

import java.nio.file.Paths

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens

def JS_RUNTIME = "jsc"

rootProject.getSubprojects().forEach({project ->
    if (project.plugins.hasPlugin("com.android.application")) {
        if(project.ext.react.enableHermes) {
            JS_RUNTIME = "hermes"
        }
        if (project.configurations.implementation.getDependencies().find { dep -> dep.name == "v8-android" }) {
            JS_RUNTIME = "v8"
         }
    }
})


buildscript {
  repositories {
    google()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:4.2.2'
    classpath 'de.undercouch:gradle-download-task:4.1.2'
  }
}

apply plugin: 'com.android.library'
apply plugin: 'de.undercouch.download'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def found = false
def defaultDir = null
def androidSourcesDir = null
def androidSourcesName = 'React Native sources'

if (rootProject.ext.has('reactNativeAndroidRoot')) {
  defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  androidSourcesDir = defaultDir.parentFile.toString()
} else {
  defaultDir = new File(
    projectDir,
    '/../../../node_modules/react-native/android'
  )
  androidSourcesDir = defaultDir.parentFile.toString()
}

if (defaultDir.exists()) {
  found = true
} else {
  def parentDir = rootProject.projectDir
  defaultDir = new File(parentDir, '../node_modules/react-native/android')

  1.upto(5, {
    if (found) return true
    parentDir = parentDir.parentFile

    androidSourcesDir = new File(
      parentDir,
      'node_modules/react-native'
    )

    def androidPrebuiltBinaryDir = new File(
      parentDir,
      'node_modules/react-native/android'
    )

    if (androidPrebuiltBinaryDir.exists()) {
        found = true
      } else if (androidSourcesDir.exists()) {
        found = true
      }
  })
}

android {
  compileSdkVersion safeExtGet('compileSdkVersion', 30)
  ndkVersion safeExtGet('ndkVersion', "21.4.7075529")

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 16)
    targetSdkVersion safeExtGet('targetSdkVersion', 30)
    versionCode 1
    versionName "1.0"
    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -Wno-unused-variable -fstack-protector-all"
        arguments "-DDEV_CMAKE=true",
          "-DNODE_MODULES_DIR=${defaultDir.parentFile.parentFile.toString()}",
          "-DJS_RUNTIME=${JS_RUNTIME}"
        abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
      }
    }
  }

  dexOptions {
    javaMaxHeapSize "4g"
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  packagingOptions {
    excludes = ["**/libc++_shared.so", "**/libfbjni.so", "**/libreactnativejni.so", "**/libjsi.so", "**/MANIFEST.MF"]
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  configurations {
    extractHeaders
    extractJNI
  }
}

repositories {
  mavenCentral()
  google()

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
  } else {
    def parentDir = rootProject.projectDir
    defaultDir = new File(parentDir, '../node_modules/react-native/android')

    1.upto(5, {
      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
        "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

dependencies {

  implementation "androidx.transition:transition:1.1.0"

  // noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'

  extractHeaders("com.facebook.fbjni:fbjni:+:headers")
  extractJNI("com.facebook.fbjni:fbjni:+")
  
  def rnAAR = fileTree("${defaultDir.toString()}").matching({ it.include "**/**/*.aar" }).singleFile

  if (JS_RUNTIME == "v8") {
      rnAAR = fileTree("${rootDir}/../node_modules/react-native-v8/dist").matching({ it.include "**/**/*.aar" }).singleFile
  }
  
  extractJNI(files(rnAAR))
}



// third-party-ndk deps headers

def downloadsDir = new File("/tmp/reanimated-downloads")
def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")
def thirdPartyVersionsFile = new File("${androidSourcesDir.toString()}/ReactAndroid/gradle.properties")
def thirdPartyVersions = new Properties()
thirdPartyVersions.load(new FileInputStream(thirdPartyVersionsFile))

def BOOST_VERSION = thirdPartyVersions["BOOST_VERSION"]
def boost_file = new File(downloadsDir, "boost_${BOOST_VERSION}.tar.gz")
def DOUBLE_CONVERSION_VERSION = thirdPartyVersions["DOUBLE_CONVERSION_VERSION"]
def double_conversion_file = new File(downloadsDir, "double-conversion-${DOUBLE_CONVERSION_VERSION}.tar.gz")
def FOLLY_VERSION = thirdPartyVersions["FOLLY_VERSION"]
def folly_file = new File(downloadsDir, "folly-${FOLLY_VERSION}.tar.gz")
def GLOG_VERSION = thirdPartyVersions["GLOG_VERSION"]
def glog_file = new File(downloadsDir, "glog-${GLOG_VERSION}.tar.gz")

static def findNodeModulePath(baseDir, packageName) {
    def basePath = baseDir.toPath().normalize()
    // Node's module resolution algorithm searches up to the root directory,
    // after which the base path will be null
    while (basePath) {
        def candidatePath = Paths.get(basePath.toString(), "node_modules", packageName)
        if (candidatePath.toFile().exists()) {
            return candidatePath.toString()
        }
        basePath = basePath.getParent()
    }
    return null
}

task createNativeDepsDirectories {
  doLast {
    downloadsDir.mkdirs()
    thirdPartyNdkDir.mkdirs()
  }
}

task downloadBoost(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/react-native-community/boost-for-react-native/releases/download/v${BOOST_VERSION.replace("_", ".")}-0/boost_${BOOST_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(boost_file)
}

task prepareBoost(dependsOn: downloadBoost, type: Copy) {
  from(tarTree(resources.gzip(downloadBoost.dest)))
  from("src/main/jni/third-party/boost/Android.mk")
  include("Android.mk", "boost_${BOOST_VERSION}/boost/**/*.hpp", "boost/boost/**/*.hpp")
  includeEmptyDirs = false
  into("$thirdPartyNdkDir")
  doLast {
    file("$thirdPartyNdkDir/boost_${BOOST_VERSION}").renameTo("$thirdPartyNdkDir/boost")
  }
}

task downloadDoubleConversion(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/google/double-conversion/archive/v${DOUBLE_CONVERSION_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(double_conversion_file)
}

task prepareDoubleConversion(dependsOn: downloadDoubleConversion, type: Copy) {
  from(tarTree(downloadDoubleConversion.dest))
  from("src/main/jni/third-party/double-conversion/Android.mk")
  include("double-conversion-${DOUBLE_CONVERSION_VERSION}/src/**/*", "Android.mk")
  filesMatching("*/src/**/*", { fname -> fname.path = "double-conversion/${fname.name}" })
  includeEmptyDirs = false
  into("$thirdPartyNdkDir/double-conversion")
}

task downloadFolly(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/facebook/folly/archive/v${FOLLY_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(folly_file)
}

task prepareFolly(dependsOn: downloadFolly, type: Copy) {
  from(tarTree(downloadFolly.dest))
  from("src/main/jni/third-party/folly/Android.mk")
  include("folly-${FOLLY_VERSION}/folly/**/*", "Android.mk")
  eachFile { fname -> fname.path = (fname.path - "folly-${FOLLY_VERSION}/") }
  includeEmptyDirs = false
  into("$thirdPartyNdkDir/folly")
}

task downloadGlog(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/google/glog/archive/v${GLOG_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(glog_file)
}

task prepareGlog(dependsOn: downloadGlog, type: Copy) {
  from(tarTree(downloadGlog.dest))
  from("src/main/jni/third-party/glog/")
  include("glog-${GLOG_VERSION}/src/**/*", "Android.mk", "config.h")
  includeEmptyDirs = false
  filesMatching("**/*.h.in") {
    filter(ReplaceTokens, tokens: [
      ac_cv_have_unistd_h           : "1",
      ac_cv_have_stdint_h           : "1",
      ac_cv_have_systypes_h         : "1",
      ac_cv_have_inttypes_h         : "1",
      ac_cv_have_libgflags          : "0",
      ac_google_start_namespace     : "namespace google {",
      ac_cv_have_uint16_t           : "1",
      ac_cv_have_u_int16_t          : "1",
      ac_cv_have___uint16           : "0",
      ac_google_end_namespace       : "}",
      ac_cv_have___builtin_expect   : "1",
      ac_google_namespace           : "google",
      ac_cv___attribute___noinline  : "__attribute__ ((noinline))",
      ac_cv___attribute___noreturn  : "__attribute__ ((noreturn))",
      ac_cv___attribute___printf_4_5: "__attribute__((__format__ (__printf__, 4, 5)))"
    ])
    it.path = (it.name - ".in")
  }
  into("$thirdPartyNdkDir/glog")

  doLast {
    copy {
      from(fileTree(dir: "$thirdPartyNdkDir/glog", includes: ["stl_logging.h", "logging.h", "raw_logging.h", "vlog_is_on.h", "**/src/glog/log_severity.h"]).files)
      includeEmptyDirs = false
      into("$thirdPartyNdkDir/glog/exported/glog")
    }
  }
}

task prepareHermes() {
    def hermesPackagePath = findNodeModulePath(projectDir, "hermes-engine")
    if (!hermesPackagePath) {
        throw new GradleScriptException("Could not find the hermes-engine npm package", null)
    }

    def hermesAAR = file("$hermesPackagePath/android/hermes-debug.aar")
    if (!hermesAAR.exists()) {
        throw new GradleScriptException("The hermes-engine npm package is missing \"android/hermes-debug.aar\"", null)
    }

    def soFiles = zipTree(hermesAAR).matching({ it.include "**/*.so" })

    copy {
        from soFiles
        from "${androidSourcesDir.toString()}/ReactAndroid/src/main/jni/first-party/hermes/Android.mk"
        into "$thirdPartyNdkDir/hermes"
    }
}

task prepareThirdPartyNdkHeaders {
  if (!boost_file.exists()) {
    dependsOn(prepareBoost)
  }
  if (!double_conversion_file.exists()) {
    dependsOn(prepareDoubleConversion)
  }
  if (!folly_file.exists()) {
    dependsOn(prepareFolly)
  }
  if (!glog_file.exists()) {
    dependsOn(prepareGlog)
  }
  dependsOn(prepareHermes)
}

prepareThirdPartyNdkHeaders.mustRunAfter createNativeDepsDirectories

task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "**/*.h"
      }
    }
  }
}
extractAARHeaders.mustRunAfter prepareThirdPartyNdkHeaders

task extractJNIFiles {
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile

      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}
extractJNIFiles.mustRunAfter extractAARHeaders

tasks.whenTaskAdded { task ->
  if (!task.name.contains('Clean') && (task.name.contains('externalNative') || task.name.contains('CMake'))) {
    task.dependsOn(extractAARHeaders)
    task.dependsOn(extractJNIFiles)
    task.dependsOn(prepareThirdPartyNdkHeaders)
  }
}
